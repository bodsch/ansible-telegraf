---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        # artixlinux
        - "{{ ansible_os_family | lower | replace(' ', '') }}.yml"
        - default.yaml
      skip: true

- name: update package cache
  ansible.builtin.package:
    update_cache: true

- name: define delegate instance for download handling
  ansible.builtin.set_fact:
    telegraf_delegate_to: "{{ ansible_host }}"
    telegraf_local_tmp_directory: "{{
        lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
        default('/var/cache/ansible/telegraf', true) }}/{{ telegraf_version }}"
  when:
    - telegraf_direct_download

- name: install dependency
  ansible.builtin.package:
    name: "{{ telegraf_requirements }}"
    state: present
  when:
    - telegraf_requirements | default([]) | count > 0

- name: latest release
  when:
    - telegraf_version == "latest"
  block:
    - name: get latest release
      delegate_to: localhost
      become: false
      run_once: true
      ansible.builtin.uri:
        url: "https://api.github.com/repos/influxdata/telegraf/releases/latest"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
        validate_certs: false
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      # no_log: "{{ not lookup('env', 'ANSIBLE_DEBUG') | bool }}"
      register: _latest_release
      until: _latest_release.status == 200
      retries: 5

    - name: re-define telegraf_version
      ansible.builtin.set_fact:
        telegraf_version: "{{ _latest_release.json.tag_name[1:] }}"

- name: detect our installation path '{{ telegraf_install_path | dirname }}'
  ansible.builtin.stat:
    path: "{{ telegraf_install_path | dirname }}"
    get_checksum: false
  register: stat_telegraf_path
  ignore_errors: true

- name: old installation
  when:
    - stat_telegraf_path is defined
    - stat_telegraf_path.stat is defined
    - stat_telegraf_path.stat.isdir is defined
    - not stat_telegraf_path.stat.isdir
  block:
    - name: stop old service
      ansible.builtin.service:
        name: prometheus
        state: stopped
        enabled: false
      notify:
        - daemon-reload

    - name: remove installed systemd unit
      ansible.builtin.file:
        state: absent
        path: /etc/systemd/system/telegraf.service
      when:
        - ansible_service_mgr | lower == "systemd"

    - name: remove installed telegraf
      ansible.builtin.file:
        state: absent
        path: "{{ stat_telegraf_path.stat.path }}"

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: detect installed telegraf binary
  ansible.builtin.stat:
    path: "{{ telegraf_install_path }}/telegraf"
  register: stat_telegraf_binary

- name: create download directory
  become: false
  delegate_to: "{{ telegraf_delegate_to }}"
  ansible.builtin.file:
    path: "{{ telegraf_local_tmp_directory }}"
    state: directory
    mode: 0750

- name: user and group handling
  when:
    - telegraf_system_user != "root" or telegraf_system_group != "root"
  block:
    - name: create telegraf group
      ansible.builtin.group:
        name: "{{ telegraf_system_group }}"
        state: present
        system: true
      when:
        - telegraf_system_group != "root"

    - name: create telegraf user
      ansible.builtin.user:
        name: "{{ telegraf_system_user }}"
        groups: "{{ telegraf_system_group }}"
        append: true
        shell: /usr/sbin/nologin
        system: true
        createhome: false
        home: /nonexistent
      when:
        - telegraf_system_user != "root"

- name: create install directory
  ansible.builtin.file:
    path: "{{ telegraf_install_path }}"
    state: directory
    owner: "{{ telegraf_system_user }}"
    group: "{{ telegraf_system_group }}"
    mode: 0755

- name: create ansible local facts directory
  ansible.builtin.file:
    dest: /etc/ansible/facts.d
    state: directory
    owner: root
    group: root
    mode: 0775

- name: merge telegraf configuration between defaults and custom
  ansible.builtin.set_fact:
    telegraf_service: "{{ telegraf_defaults_service | combine(telegraf_service, recursive=True) }}"
    telegraf_config_agent: "{{ telegraf_defaults_config_agent | combine(telegraf_config_agent, recursive=True) }}"
    telegraf_config_outputs: "{{ telegraf_defaults_config_outputs | union(telegraf_config_outputs) | telegraf_clean_list }}"
    telegraf_config_inputs: "{{ telegraf_defaults_config_inputs | union(telegraf_config_inputs) }}"
    telegraf_config_processors: "{{ telegraf_defaults_config_processors | union(telegraf_config_processors) }}"
    telegraf_config_aggregators: "{{ telegraf_defaults_config_aggregators | union(telegraf_config_aggregators) | telegraf_clean_list }}"

- name: fail if no output defined
  ansible.builtin.fail:
    msg: |
      No outputs found!
      You must define a valid output so that the service can start properly.
  when:
    - telegraf_config_outputs | count == 0

...
